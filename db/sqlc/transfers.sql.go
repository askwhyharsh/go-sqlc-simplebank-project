// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: transfers.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const insertTransfer = `-- name: InsertTransfer :one
INSERT INTO transfers (from_accout_id, to_account_id, amount, created_at)
VALUES
($1, $2, $3, $4)
RETURNING id
`

type InsertTransferParams struct {
	FromAccoutID sql.NullInt64 `json:"from_accout_id"`
	ToAccountID  sql.NullInt64 `json:"to_account_id"`
	Amount       int64         `json:"amount"`
	CreatedAt    time.Time     `json:"created_at"`
}

func (q *Queries) InsertTransfer(ctx context.Context, arg InsertTransferParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertTransfer,
		arg.FromAccoutID,
		arg.ToAccountID,
		arg.Amount,
		arg.CreatedAt,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const selectAllTransfers = `-- name: SelectAllTransfers :many
SELECT id, from_accout_id, to_account_id, amount, created_at FROM transfers
ORDER BY id
`

func (q *Queries) SelectAllTransfers(ctx context.Context) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, selectAllTransfers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccoutID,
			&i.ToAccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
